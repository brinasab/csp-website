---
title: "Introduction to R: Lecture 2"
subtitle: "Topics: Git/GitHub with RStudio"
author: "Sabrina Nardin, Summer 2025"
format:
  revealjs:
    theme: simple
    slide-number: true
    incremental: false
    css: ../style/styles.css
    code-overflow: wrap
    highlight-style: github
    ratio: 16:9
    chalkboard: true
    toc: false
    center: true
---

```{r}
#| include: false
library(tidyverse)
#library(rcis)
library(gapminder)
library(countdown)
library(here)
library(ymlthis)
library(ggplot2)
```

# Agenda {.center}

::: {.agenda-list}
1. Motivation: Automation & Reproducibility  
2. Introduction to Git & GitHub  
3. Deeper Dive into Git & GitHub  
:::

<!--

SUMMER 25 LECTURE 2 OUTLINE 

Quiz and Attendance
1:00 - 1:15

1. Motivation 
1:15 - 1:20 Slides intro + Zach examples

2. Introduction to Git & GitHub 
1:20 - 1:30 Slides
1:30 - 2:00 Tutorial using Git & GitHub in RStudio
2:00 - 2:10 Wrap up and more questions 

3. Deeper Dive into Git & GitHub
2:10 - 2:15 Short selected slides form this sections

4. HW1 Overview
2:15 - 2:30 Accept and overview


-->


# 1. Motivation {.slide .center .middle}

---

::: {.columns}

::: {.column width="47%"}
### Use programming for data analysis, and use version control to automatically keep track of changes in your work?
:::

::: {.column width="6%"}

:::

::: {.column width="47%"}
### Or use point-and-click software for data analysis, and save multiple copies of your work by hand to track changes?
:::

:::


<!-- IN CLASS
Unpack this question and define terms, then reason it out loud with
-->

---

## Two Different Approaches

**TASK:** Write a report on the relationship between income and crime rates in Chicago.

**APPROACH:** Jane and Sally approach this task differently...

<div class="fragment">

::: columns
::: {.column width="50%"}

### Jane: GUI Workflow

1. Searches for data files online  
1. Cleans the data using Excel  
1. Analyzes the data in Excel (or similar)  
1. Writes her report in Google Docs
1. Saves different versions of her work manually

:::

::: {.column width="50%"}

### Sally: Programmatic Workflow

1. Searches for data files online  
1. Cleans the data using R  
1. Analyzes the data in R  
1. Writes her report in R Markdown
1. Tracks changes automatically using Git
:::
:::

</div>

```{r, echo = FALSE, out.height = "70%", out.width = "70%", fig.width = 5}
#include_graphics(path = "https://i.imgflip.com/1szkun.jpg")
```

---

## Two Main Advantages of a Programmatic Workflow

### 1. Automation

- Uses programs (e.g., R) to perform tasks systematically  
- Reduces manual effort and human error  
- Enables fast and consistent repetition of analyses

::: {.fragment}

### 2. Reproducibility

- Scientific research should share both data and code used for analysis  
- Allows verification and reuse by others  
- Enables exact replication of results, even years later

:::


# 2. Introduction to Git & GitHub {.slide .center .middle}

---

## Often used together, but they are different tools

::: {.columns}

:::: {.column width="50%"}

[![](https://git-scm.com/images/logos/downloads/Git-Icon-1788C.png){width=80px}](https://git-scm.com)  

### Git
- Version control software  
- Runs **locally** on your computer
- Tracks changes you make to files in a specific folder (that you decide), called local repository or repo

::::

:::: {.column width="50%"}

[![](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png){width=80px}](https://github.com)  

### GitHub
- Cloud-based platform  
- Runs **online**
- Stores copies of your local Git repository online, and enables backup and collaboration, you push to and pull from GitHub

::::

:::

<div class="fragment">
Let's unpack all of this...
</div>


---

## What is Version Control?

#### Version Control

Is a system that records every change you make to your files in a folder (what changed, who made it, and when) and lets you undo mistakes or restore previous versions of your files.

**Git** is a software that does version control.

<br>

#### Without Version Control 

You have to track changes *manually* which be messy and hard to manage, like:

- `analysis-1.R`
- `analysis-2.R`
- `analysis-final.R`
- `analysis-final-FINAL.R`

</br>

---

## How Version Control (Git) Works

- You choose a folder on your computer: this becomes your **local repository** or local repo
- A Version Control tool, like **Git**, records and saves changes you make to the files in that folder
- Every change is saved with a time stamp, author info, and a message (that you type in)

You can revisit your project's history and restore earlier versions of a file if needed!

<br>

<div class="fragment">

### How Version Control (Git) + GitHub Works

- You can link your local Git repository to an online GitHub repository
- So you can push your local changes to GitHub 
- And share your work with others


```{r echo = FALSE, out.width = "35%"}
#include_graphics(path = "https://res.cloudinary.com/practicaldev/image/fetch/s--7MQClrRp--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ce4oq75sia6ni6q46s3.png")
```

</div>
</br>

---

## Git & GitHub Comparison

| Feature         | **Git**                          | **GitHub**                             |
|----------------|-----------------------------------|----------------------------------------|
| What it is     | Version control software          | Cloud platform for Git repos           |
| Where it runs  | Locally (your computer)           | Online (web-based)                     |
| What it does   | Tracks changes in your local repo | Stores & shares remote copies          |
| Collaboration  | Not built-in                      | Pull, issues, code reviews              |
| Use in RStudio | Git Tab     | Connect via setup or terminal          |
| Repo      | **Local repo** = your folder      | **Remote repo** = copy on GitHub       |

<br>

Note: we use **Git and GitHub via RStudio** only. They are also used with other tools like GitHub Desktop, terminal, etc.

</br>
---

## Okay, that was a lot of info. Let’s put it into practice!

We’ll go through it in two steps:

**1. Configure your Setup:** Set up Git, GitHub, and RStudio so everything works together

**2. Try It Out in RStudio:** Git & GitHub tutorial to practice using version control in RStudio

---

## 💻 Step 1: Configure your Setup

### Complete

### <https://brinasab.github.io/csp-website/setup/setup-workbench.html>

---

## 💻 Step 2: Use Git and GitHub in RStudio Tutorial

### Once Step 1 is done, complete:

### <https://brinasab.github.io/csp-website/setup/setup-test.html>

<br>

#### Instructions:

- Work in pairs: one person (the most experienced with programming) read the instructions and guide the other, who executes the commands. 

- Keep track of your questions as you go and post them in [this Google doc](https://docs.google.com/document/d/1iQacRXqGLpke1D6qm_-kBkHBtrZy7SJYtRzFR88-Y_I/edit?usp=sharing)
- Raise your hand if you need help! 

</br>

---

## Recap: Beginner-Friendly Git & GitHub Workflow

1. **Make & Save Changes Locally**  
   <span class="fragment">Edit your files locally (e.g., in RStudio or Workbench) and save them.</span>

2. **Pull from GitHub**  
   <span class="fragment">Refresh your local copy to get the latest changes—helps avoid conflicts when collaborating.</span>

3. **Stage Changes**  
   <span class="fragment">Select which files you want Git to track in the next snapshot.</span>

4. **Commit with a Message**  
   <span class="fragment">Save a snapshot of your staged changes in your local Git repo. Add a short, meaningful message.</span>

5. **Push to GitHub**  
   <span class="fragment">Upload your committed changes to the online repository.</span>

::: {.callout-important}
You will complete this workflow for all homework assignments!
:::

<!-- IN CLASS
Most of the time you'll use this or similar sequences:  
**`add` → `commit` → `push` → `pull`**
But there is more to Git and GitHub. You'll leave this course ready to use the basics of Git confidently, and learn more when needed!
-->

---

## Git Reminders

- **Stage and commit often**  
  Think of commits as snapshots of your work. Save, stage, and commit regularly during your workflow.

- **Write clear, useful commit messages**  
  Keep messages concise but descriptive. They should explain what changed and why.  Many tips online for "commit message best practices."

- **Push regularly, but not necessarily every time you commit** 
  Some people push every time they commit, while others push multiple commits at once. Experiment and find what works best for you.

- **Work locally, and push on GitHub**  
  Do not do the other way around (e.g., do not modify your GitHub repository directly; work on your local copy, and push changes to GitHub).

---

## 💻 Accept Homework 1 

Accept Homework 1 from the course site and follow the instructions.

Note: this will only work if we have your GitHub username and you accepted the invite to our GitHub organization (which was sent to the email linked to your GitHub account)!


# 3. Deeper Dive into Git & GitHub  {.slide .center .middle}

<br>

Come back here once you are familiar with the basic workflow! These slides won't be included in the in-class quiz, but they might be handy if you run into problems in homework assigments.

</br>

---

## What to Commit / Not to Commit

::: {.columns}

::: {.column width="50%"}

### ✅ What to Commit

- Code files
- Markdown or Quarto files
- Small data files
- README and documentation

:::

::: {.column width="50%"}

### 🚫 What Not to Commit

- Temporary files (e.g., `.Rproj.user/`)
- Log or output files
- Files with private information
- Files larger than 100 MB

:::

:::

<br>

<div class="fragment">

### What Not to Commit goes in the ".gitignore" file

- Tells Git what to ignore from your folder
- Use a [template](https://github.com/github/gitignore) (search for R-specific template, which works well for most class projects)

</div>
</br>

---

### Git Large File Storage (Git LFS)

What if you need to track a file larger than 100 MB?

GitHub **does not allow** pushing files over 100 MB. If you have such a file, **don’t try to push it directly.**

Instead:

- Use [Git Large File Storage (Git LFS)](https://git-lfs.github.com/)
- A separate tool that integrates with Git
- Designed specifically for large files (e.g., datasets, media)
- **Note:** Git LFS storage on GitHub often comes with usage limits and may require a paid plan

---

## Git Conflicts

A **Git conflict** happens when Git doesn’t know which version of a file to keep.

Git gets confused because the same file was changed in two places. 

Git conflicts are more common when working in shared repositories, and they shouldn't occur when you're working alone in your own repository (as you will in this course), but they still can happen...

---

## When Do Conflicts Happen?

**Collaborative Work**  
- You and a teammate edit the same file (or even the same line)  
- You push changes without pulling the latest version from GitHub first  
- Tip: Always run `git pull` before `git push`

<br>

**Working Solo**  
- You make changes locally and also edit the same file directly on GitHub  
- Git can’t tell which version to keep  
- Tip: Always work in your local repository and use the workflow from the previous slide to push to Github

---

## What Causes a Conflict?

**A Git conflict may happen when Git finds two competing versions of the same file:** one in your local repo (Git, on your computer) VS. one in the remote repo (GitHub, online)

The local and remote repos are expected to match. If they don't, Git tries to merge them automatically.

### Two Possible Outcomes

✅ **No conflict:**  
  If the changes are in different parts of the file, Git **merges automatically** and no action is needed.

❌ **Conflict:**  
  If the same part of the file was changed in both versions, Git **cannot decide** what to keep.  
  → You must **manually review and resolve** the conflict.
  
---

## What a Git Conflict Looks Like

When a conflict happens, Git marks the file with special lines to show the two versions:

```diff
<<<<<<< HEAD
This is your version (from your local repo)
=======
This is the other version (from GitHub or your teammate)
>>>>>>> main
```

To solve it, you need to use Git with the terminal (ask us for help if that occurs!)

<!--

## What You Need to Do (When a Conflict Happens)

Pull the latest changes from GitHub
   git pull origin main
   
Open the file or files and look for the conflict markers:  
   `<<<<<<<`, `=======`, `>>>>>>>`

Decide which version to keep or manually combine them

Delete the conflict markers

Save the file

Run the following commands in bash
  git add <filename>
  git commit -m "solved conflict"
  git push origin main

--->

---

## Avoiding (Most) Git Conflicts

### Rather than *solving* conflicts, we want to *avoid* them as much as possibile with good practices:

+ **Make changes locally**, then stage and commit (early and often)  
+ **Push regularly** to keep your GitHub repo in sync  
+ **Always pull before you push** to avoid conflicts

### Key Sequence to Use: 

`git pull` → make changes → `git add` + `git commit` → `git push`

<!--
Want to practice? Complete the ["Using Git with RStudio"](https://computing-soc-sci.netlify.app/setup/git/git-with-rstudio/) tutorial on our course website for hands-on experience with the Git GUI in RStudio.
-->

---

## Burn it All Down

<div style="text-align: center;">
  <img src="https://imgs.xkcd.com/comics/git.png" />
</div>


---

## Recap: What We Learned Today

- Familiarized with Git & GitHub
- How to use Git & GitHub within RStudio

---

## Reminders

- Homework 1 is now open and due next week. Check the Course Schedule on our website for the exact due date.
- If you haven't completed these yet, please do so ASAP, as you won't be able to access and complete Homework 1 otherwise:
  - Register a GitHub account and submit your username (see Lecture 1)
  - Setup your computer (see today's lecture)

---

## To print these slides as pdf

Click on the icon bottom-right corner \> Tools \> PDF Export Mode \> Print as a Pdf