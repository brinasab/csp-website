---
title: "Introduction to R: Lecture 10"
subtitle: "Topics: Writing Loops Part 1"
author: "Sabrina Nardin, Summer 2025"
format:
  revealjs:
    theme: simple
    slide-number: true
    incremental: false
    css: ../style/styles.css
    code-overflow: wrap
    highlight-style: github
    ratio: 16:9
    chalkboard: true
    toc: false
    center: true
---

# Agenda {.center}

::: {.agenda-list}
1. For Loops: Introduction
2. Tracking and Saving For Loop Output
3. Looping Over Elements vs. Indexes
:::

```{r, echo=FALSE, results='asis'}
cat('<span style="font-size: 0.8em; color: #666;">These slides were last updated on', format(Sys.Date(), '%B %d, %Y'), '</span>')
```

<!-- NOTES TO IMPROVE CURRENT LOOP SLIDES

Add a few slides that show the differences of looping over indexes or looping over elements and 
teach that concept form the slides; then leave the in-class demo code with the key and let students explore it in team and go around for questions. Total time 10 min slides and 10 go over code + 5 review

In the demo for loop: add code on data structure, e.g. show how to access columns of a df and their elements with the double and single square brackets 

Show difference of accessing single column in a df (that is a vector so use []) or elements of columns for which you need to use [[]]

When you teach for loops add the break and continue statements (currently not in slides!)

-->


# 1. For Loops: Introduction {.slide .center .middle}

---

## What Are Control Structures?

Control structures let us write code that can:

- **Make decisions**  
  → with **conditional statements** (`if`, `if...else`, etc.)

- **Repeat actions**  
  → with **loops** (`for`, `while`)

Today we focus on loops, and specifically on "For loops"!

---

## Definition of For Loops

"For loops" are the most common looping construct in many programming languages. They are used to **iterate over the elements of an object** (usually a list or vector) and perform an action on each one.

Syntax:
```
for (item in sequence of items) {
  action to be repeated for each item   
}
```

Example:
```r
for (item in c(1,2,3)) {
  print(item)
}
```

---

## Simple Example

```{r echo = TRUE, results = "hide"}

for (item in c(1,2,3)) {
  print(item)
}

```

Let's break this code down:

- The repeated action here is simple: `print(item)`

- `item` is a placeholder: its value changes with each loop iteration

- the number of times the statement block repeats depends on the number of items in the sequence — in this example: three items, thus three times

---

## Nested For Loops

For loops can be nested, so the outer loop controls how many times the entire inner loop runs from start to finish: 

```{r echo = TRUE, results = "hide"}

for (i in c(1,2,3)) {
  print(i)
  for (j in c("cat", "dog", "squirrel", "rabbit")) {
    print(j)
  }
}
```

Let's break this code down:

- The outer loop runs 3 times

- For each execution of the outer loop, the inner loop runs 4 times

- That’s a total of 3 × 4 = 12 inner loop outputs, plus 3 outer loop prints

<!--
for (i in 1:3) {
  print(i)
  for (j in c('a', 'b')) {
    print(i)
    print(paste(i, "outer"))
    print(j)
    print(paste(i,j))
  }
}
-->

# 2. Tracking and Saving For Loop Output {.slide .center .middle}

---

## Tracing Execution in a For Loop

Observe this code. What does this code output in each run?

```{r echo = TRUE, results = "hide"}

for (i in c(1,2,3)) {
  print(i)
  print("Hello")
  my_sum <- 100 + i
  print(my_sum)
}
```


<br>

::: {.fragment}

#### 💻 Try changing the code and predict what happens *(clear the environment before each run)*:

- Add another `print(my_sum)` before `my_sum <- 100 + i`
- After the last `print(my_sum)` add these two lines: `my_sum <- 1000` and `print(my_sum)`
- Modify these two new lines into: `my_sum <- 1000 + my_sum` and `print(my_sum)`
- Change anything else you're curious about and see what happens!

<!-- Learning goals, in order by bullet point:
- Accessing a variable before assignment
- Reassigning a value
- Using a variable in its own reassignment
- Explore
-->

:::

</br>


---

## Tracing Execution in a For Loop

This code defines the `my_sum` variable outside the loop, before it starts. What does this code output in each run?

```{r echo = TRUE, results = "hide"}

my_sum <- 0

for (i in c(1,2,3)) {
  print(i)
  print("Hello")
  my_sum <- my_sum + i
  print(my_sum)
}
```

<br>

::: {.fragment}

#### 💻 Try changing the code and predict what happens *(clear the environment before each run)*:

- Change `my_sum <- 0` to `my_sum <- 100`
- Move `my_sum <- 0` inside the loop, after the first two print statements
- Put `my_sum <- 0` back outside the loop, and comment out `my_sum <- my_sum + i`
- Change anything else you're curious about and see what happens!

:::

</br>

---

## Accumulating a Running Total 

What we just observed is a simple example of a common task: accumulating a running total. Use it when you are adding up scores, votes, or counts one at a time, and want to keep track of how the total grows after each loop.

Same code, but with clearer print statements to make each step easier to follow:

```{r echo = TRUE, results = "hide"}

my_sum <- 0

for (i in c(1,2,3)) {
  print(paste("Current i is", i))
  print("Hello")
  my_sum <- my_sum + i
  print(paste("Current sum is", my_sum))
}

my_sum
```

---

## Saving Results from For Loop

The previous code prints the updated sum each time, but only saves the final value. To save all intermediate values, we need to store them in a vector:

```{r echo = TRUE, results = "hide"}

my_sum <- 0
output <- vector(mode = "integer", length = 3)

for (i in c(1,2,3)) {
  print(paste("Current i is:", i))
  print("Hello")
  my_sum <- my_sum + i
  print(paste("Current sum is:", my_sum))
  output[i] <- my_sum     # saves sum in position i
}

output

```

::: {.callout-note .fragment .small-text title="Why `output[i] <- my_sum`?"}

When `i = 1`, `my_sum = 0 + 1 = 1` → store `1` in `output[1]` → output becomes: `1 0 0`  
When `i = 2`, `my_sum = 1 + 2 = 3` → store `3` in `output[2]` → output becomes: `1 3 0`  
When `i = 3`, `my_sum = 3 + 3 = 6` → store `6` in `output[3]` → output becomes: `1 3 6`

This saves the running total at each position `i` in the vector output.

:::

---

## Saving Results from a For Loop

**Our current code works but it’s NOT yet optimal:**

- It only behaves correctly because the input vector is exactly `c(1, 2, 3)`
- If the values in the vector change, the current loop may produce incorrect or unexpected results

**💻 Try this:** 

Take the code from the previous slide and change the input vector to `c(1, 4, 6)` and observe what happens to the `output`. Can you explain why the result changes?

---

## Saving Results from a For Loop

```{r echo = TRUE, results = "hide"}

my_sum <- 0
output <- vector(mode = "integer", length = 3)

for (i in c(1, 4, 6)) {
  print(paste("Current i is:", i))
  print("Hello")
  my_sum <- my_sum + i
  print(paste("Current sum is:", my_sum))
  output[i] <- my_sum  # saves sum in position i
}

output

```

::: {.callout-note .fragment .small title="What Happens in Each Iteration"}

When `i = 1` → `my_sum = 0 + 1 = 1` → store `1` in `output[1]` → output becomes: `1 0 0`

When `i = 4` → `my_sum = 1 + 4 = 5` → store `5` in `output[4]` → output becomes: `1 0 0 5`

When `i = 6` → `my_sum = 5 + 6 = 11` → store 11 in `output[6]` → output becomes: `1 0 0 5 NA 11`

**R won’t throw an error if you assign to an index beyond a vector’s original length: it silently extends the vector, which can lead to unexpected results.**
:::


# 3. Looping Over Elements vs. Indexes {.slide .center .middle}

---

## Elements vs. Indexes: Why It Matters

To fix the previous code we need to understand the difference between looping over elements and over indexes:

```{r echo = TRUE, results = "hide"}

# Looping over values/elements
x <- c(1, 4, 6)
for (i in x) {
  print(i)        # value
}

# Looping over indexes (method 1)
x <- c(1, 4, 6)
for (i in 1:length(x)) {
  print(i)        # index
  print(x[i])     # value at that index
}

# Looping over indexes (method 2)
x <- c(1, 4, 6)
for (i in seq_along(x)) {
  print(i)
  print(x[i])
}
```


::: {.callout-note .fragment .small title="`i` and `x[i]`"}

Note: `i` is the loop **index** or "counter" and should always go 1, 2, 3, 4, etc., while `x[i]` is the **element** or value of the vector `x` at position `i` and can be any value

:::

---

## Elements vs. Indexes: Why It Matters

Let’s see what happens when we save the output instead of just printing:

::: {.columns}

::: {.column width="50%"}

### ❌ Version A 

```{r echo = TRUE, results = "hide"}

x <- c(1, 4, 6)
my_sum <- 0
output <- vector(mode = "integer", 
                 length = length(x))

# looping over elements
for (i in x) {
  print(paste("Current i is:", i))
  my_sum <- my_sum + i
  print(paste("Current sum is:", my_sum))
  output[i] <- my_sum
}

output
```
:::

::: {.column width="50%"}

### ✅ Version B

```{r echo = TRUE, results = "hide"}

x <- c(1, 4, 6)
my_sum <- 0
output <- vector(mode = "integer", 
                 length = length(x))

# looping over indexes
for (i in seq_along(x)) {
  print(paste("Current i is:", i))
  my_sum <- my_sum + x[i]
  print(paste("Current sum is:", my_sum))
  output[i] <- my_sum
}

output

```
:::

::::


---

## Best Practice: Loop Over Indexes

Loop over indexes, like `i in 1:length(x)` or `seq_along(x)`, instead of elements/values to:

- Modify, save, or assign values by position (e.g., `output[i] <- ...`)
- Ensure your loop works regardless of the values in the vector (e.g., if values repeat or are not valid indices)
- Have you full control over both: the position `i` and the value at that position `x[i]`

---

## 💻 Practice: Fix this For Loop

You are a farmer writing a for loop to track `tomatoes` sold over three days. You want to add up the number of tomatoes sold and store the running total in a vector called `output`. But something is wrong with the code — can you fix it? First, *think* about what the `output` vector should be, then *check* the code to see what's going wrong.

```{r echo = TRUE, results = "hide"}

tomatoes <- c(10, 2, 100) 
s <- 0
output <- vector(mode = "integer", 
                 length = length(tomatoes))

for (i in seq_along(tomatoes)) {
  print(paste("Current i is:", i))
  s <- s + i
  print(paste("Current sum is:", s))
  output[i] <- s
}

output

```

<!--
```{r echo = TRUE, results = "hide"}

tomatoes <- c(10, 2, 100) 
s <- 0
output <- vector(mode = "integer", 
                 length = length(tomatoes))

for (i in seq_along(tomatoes)) {
  print(paste("Current i is:", i))
  s <- s + tomatoes[i]
  print(paste("Current sum is:", s))
  output[i] <- s
}

output

```
-->

<!--

## 💻 Practice

You run a store and want to keep track of how many items were sold each day: you sold 5 items in day 1, 3 items on day 2, and 7 items on day 3

```r
daily_sales <- c(5, 3, 7)
```

Your Task:

- Use a for loop to go through each day’s sales 
- For each day, print something like: "Day 2 - Items sold: 3" (the message should change accordingly)
- Create an object called `total` to store a running total of all sales
- Create an object called `ouput` to store the total after each day (e.g. `output[2]` should store the total sales after day 2)

<!--
daily_sales <- c(5, 3, 7)

total <- 0
output <- vector(mode = "integer", length = length(daily_sales))

for (i in seq_along(daily_sales)) {
  print(paste("Day", i, "- Items sold:", daily_sales[i]))
  total <- total + daily_sales[i]
  output[i] <- total
}

-->

---

## Recap: What We Learned Today

- How for loops work and how to trace what happens at each iteration
- How to track and save values (like running totals) during a for loop
- Why it's important to loop over indexes instead of elements when saving or modifying values
- Common mistakes with loop output and how to fix them

---

## To print these slides as pdf

Click on the icon bottom-right corner \> Tools \> PDF Export Mode \> Print as a Pdf
